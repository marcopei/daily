4. redis部署
4.1安装
shell]# wget http://download.redis.io/releases/redis-3.2.11.tar.gz
shell]# tar xf redis-3.2.11.tar.gz
shell]# cd redis-3.2.11
shell]# make PREFIX=/usr/local/redis install
shell]# echo 'PATH=/usr/local/redis/bin:$PATH' > /etc/profile.d/redis.sh
shell]# vim /etc/sysctl.conf #加入以下内容
vm.overcommit_memory=1
shell]# sysctl -p
shell]# echo never > /sys/kernel/mm/transparent_hugepage/enabled
shell]# vim /etc/rc.local #加入以下内容
echo never > /sys/kernel/mm/transparent_hugepage/enabled

4.2 单实例redis配置
shell]# mkdir /data/redis -p
shell]# chown shenqi.shenqi /data/redis/
shell]# su - shenqi
shell]$ mkdir /data/redis/redis6379
shell]$ vim /data/redis/redis6379/redis.conf #内容如下
## 自定义配置
bind 0.0.0.0
#protected-mode yes
port 6380
unixsocket  redis.sock
appendonly yes
pidfile  redis.pid
logfile  "/data/nsoft/redis/redis.log"
#announce 5.0才有效
#cluster-announce-port 7003
#cluster-announce-bus-port 17003
# 自己服务器的ip
#cluster-announce-ip 172.16.16.13
daemonize yes
appendonly yes
appendfilename  "appendonly.aof"

rdbcompression yes
rdbchecksum yes
dbfilename dump.rdb
dir  /data/nsoft/redis

启动redis
]# /usr/local/redis/bin/redis-server /data/redis/redis6379/redis.conf


4.3 redis cluster部署
shell]# su - shenqi
shell]$ mkdir /data/redis/redis700{0..5}
shell]$ vim /data/redis/redis7000/redis.conf #加入以下内容
############################### NETWORK #####################################
#bind 127.0.0.1
protected-mode no
port 27000
tcp-backlog 511
unixsocket redis.sock
# unixsocketperm 700
timeout 0
tcp-keepalive 300

################################# GENERAL #####################################
daemonize yes
supervised no
pidfile redis.pid
loglevel notice
logfile "/data/nsoft/redis/redis7000/redis.log"
databases 16

################################ SNAPSHOTTING  ################################
save 900 1
save 300 10
save 60  10000
stop-writes-on-bgsave-error yes
rdbcompression yes
rdbchecksum yes
dbfilename  dump.rdb
dir /data/nsoft/redis/redis7000

################################# REPLICATION #################################

# slaveof <masterip> <masterport>
#masterauth vJKQDHLsnekC4OtGC1UwvguB2wLr1lz207MCOCy619PhPV9rc56O78Bdl5ikUDrD
#slave-serve-stale-data yes
#slave-read-only yes
#repl-diskless-sync no
#repl-diskless-sync-delay 5
# repl-ping-slave-period 10
# repl-timeout 60
#repl-disable-tcp-nodelay no
# repl-backlog-size 1mb
# repl-backlog-ttl 3600
#slave-priority 100
# min-slaves-to-write 3
# min-slaves-max-lag 10
# slave-announce-ip 5.5.5.5
# slave-announce-port 1234

################################## SECURITY ###################################
#requirepass vJKQDHLsnekC4OtGC1UwvguB2wLr1lz207MCOCy619PhPV9rc56O78Bdl5ikUDrD
# rename-command CONFIG b840fc02d524045429941cc15f59e41cb7be6c52
# rename-command CONFIG ""

################################### LIMITS ####################################
maxclients 10000
maxmemory 2gb
# maxmemory-policy noeviction
# maxmemory-samples 5

############################## APPEND ONLY MODE ###############################
appendonly no
appendfilename "appendonly.aof"
appendfsync everysec
no-appendfsync-on-rewrite no
auto-aof-rewrite-percentage 100
auto-aof-rewrite-min-size 64mb
aof-load-truncated yes

################################ LUA SCRIPTING  ###############################
lua-time-limit 5000

################################ REDIS CLUSTER  ###############################
cluster-enabled yes
cluster-config-file nodes.conf
cluster-node-timeout 15000
# cluster-slave-validity-factor 10
# cluster-migration-barrier 1
# cluster-require-full-coverage yes

################################## SLOW LOG ###################################
slowlog-log-slower-than 1000
slowlog-max-len 1000

################################ LATENCY MONITOR ##############################
latency-monitor-threshold 0

############################### ADVANCED CONFIG ###############################

hash-max-ziplist-entries 512
hash-max-ziplist-value 64
list-max-ziplist-size -2
list-compress-depth 0
set-max-intset-entries 512
zset-max-ziplist-entries 128
zset-max-ziplist-value 64
hll-sparse-max-bytes 3000
activerehashing yes
client-output-buffer-limit normal 0 0 0
client-output-buffer-limit slave 256mb 64mb 60
client-output-buffer-limit pubsub 32mb 8mb 60
hz 10
aof-rewrite-incremental-fsync yes


shell]$ for i in {1..5};do cp /data/redis/redis7000/redis.conf /data/redis/redis700$i/redis.conf;done
shell]$ for i in {1..5};do sed -i "s/7000/700$i/g" /data/redis/redis700$i/redis.conf;done

启动节点
shell]$ /usr/local/redis/bin/redis-server /data/redis/redis7000/redis.conf
shell]$ /usr/local/redis/bin/redis-server /data/redis/redis7001/redis.conf
shell]$ /usr/local/redis/bin/redis-server /data/redis/redis7002/redis.conf
shell]$ /usr/local/redis/bin/redis-server /data/redis/redis7003/redis.conf
shell]$ /usr/local/redis/bin/redis-server /data/redis/redis7004/redis.conf
shell]$ /usr/local/redis/bin/redis-server /data/redis/redis7005/redis.conf

节点握手
shell]$ for i in {1..5};do /usr/local/redis/bin/redis-cli -h 192.168.1.235 -p 7000 cluster meet 192.168.1.235 700$i;done
shell]$ /usr/local/redis/bin/redis-cli -h 192.168.1.235 -p 7000 cluster nodes


分配slot
shell]$ /usr/local/redis/bin/redis-cli -h 192.168.1.235 -p 7000 cluster addslots {0..5461}
OK
shell]$ /usr/local/redis/bin/redis-cli -h 192.168.1.235 -p 7001 cluster addslots {5462..10922}
OK
shell]$ /usr/local/redis/bin/redis-cli -h 192.168.1.235 -p 7002 cluster addslots {10923..16383}
OK

使未分配slot的节点成为从节点，命令在从节点上执行, nodeId为要复制的主节点ID
shell]$ /usr/local/redis/bin/redis-cli -h 192.168.1.235 -p 7003 cluster replicate c5e394cda6956210d0fb68c0ef7fb92de8252065
OK
shell]$ /usr/local/redis/bin/redis-cli -h 192.168.1.235 -p 7004 cluster replicate 7472cd82f41999d40573efc41658a247d8a70719
OK
shell]$ /usr/local/redis/bin/redis-cli -h 192.168.1.235 -p 7005 cluster replicate 8109f00d85753da4f832445d1ce9e61f9e30e9a9
OK

查看节点情况：
shell]$ /usr/local/redis/bin/redis-cli -h 192.168.1.235 -p 7000 cluster nodes